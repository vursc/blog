title       从零开始的 ‘Hello, UEFI’
created     2023-02-26
updated	    2023-11-05

我打算动手实现一个精简的现代 x64 操作系统。因为 Intel 已经放弃了新产品对 legacy BIOS 的支持，这个操作系统将通过 UEFI 引导。本文整理了一些零散的相关资料，向读者说明如何用二进制编辑器直接制作 ‘Hello, UEFI’ 启动盘。

最新的 UEFI 规范可以在 @href{https://uefi.org/specifications/} 直接获取。


# 果然还是汇编语言比较简单

虽然 UEFI 应用程序理论上应该用 C 语言开发，为了避开 C 编译器相关的麻烦，也为了方便后面手写机器码，我还是选择用汇编语言编写 'Hello, UEFI' 程序。

在完成必要的准备之后，UEFI 固件跳转到程序的入口处。入口的原型为：[2]

#<
	uint64_t entry(void *ImageHandle, EFI_SYSTEM_TABLE *SystemTable);
#>

根据 [3] 描述的调用约定，"ImageHandle" 和 "SystemTable" 分别通过 rcx 和 rdx 传入。我们的程序不会用到前者。"EFI_SYSTEM_TABLE" 的定义如下：

#<
	typedef struct {
	    uint64_t        Signature;
	    uint32_t        Revision;
	    uint32_t        HeaderSize;
	    uint32_t        CRC32;
	    uint32_t        Reserved;
	} EFI_TABLE_HEADER;

	typedef struct {
	    EFI_TABLE_HEADER                    Hdr;
	    uint16_t                           *FirmwareVendor;
	    uint32_t                            FirmwareRevision;
	    void                               *ConsoleInHandle;
	    EFI_SIMPLE_TEXT_INPUT_PROTOCOL     *ConIn;
	    void                               *ConsoleOutHandle;
	    EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL    *ConOut;
	    void                               *StandardErrorHandle;
	    EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL    *StdErr;
	    EFI_RUNTIME_SERVICES               *RuntimeServices;
	    EFI_BOOT_SERVICES                  *BootServices;
	    uint64_t                            NumberOfTableEntries;
	    EFI_CONFIGURATION_TABLE            *ConfigurationTable;
	} EFI_SYSTEM_TABLE;
#>

我们将通过 "SystemTable->ConOut" 指向的 "EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL" 输出文字。该结构体定义为：

#<
	typedef struct {
	    EFI_TEXT_RESET                      Reset;
	    EFI_TEXT_STRING                     OutputString;
	    EFI_TEXT_TEST_STRING                TestString;
	    EFI_TEXT_QUERY_MODE                 QueryMode;
	    EFI_TEXT_SET_MODE                   SetMode;
	    EFI_TEXT_SET_ATTRIBUTE              SetAttribute;
	    EFI_TEXT_CLEAR_SCREEN               ClearScreen;
	    EFI_TEXT_SET_CURSOR_POSITION        SetCursorPosition;
	    EFI_TEXT_ENABLE_CURSOR              EnableCursor;
	    SIMPLE_TEXT_OUTPUT_MODE            *Mode;
	} EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;
#>

其中，"ClearScreen" 和 "OutputString" 是两个函数指针，它们的原型分别是：

#<
	typedef uint64_t (*EFI_TEXT_STRING)(THIS, uint16_t *String);
	typedef uint64_t (*EFI_TEXT_CLEAR_SCREEN)(THIS);
#>

这里，"THIS" 是指向 "EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL" 的指针。"OutputString" 的 "String" 参数必须是 UCS-2 编码的字符串，而不是通常的 ASCII、CP437 或 UTF-8，这一点需要特别注意。

以下是 'Hello, UEFI' 的 nasm 汇编程序。因为我们的程序不会退出，所以我没有按调用约定保存 rsi 和 rdi（懒 :P）。除此之外应该都容易理解：

#<
	BITS 64
	DEFAULT REL

	global entry

	section .text
	entry:
	    mov     rsi, [rdx+64]
	    mov     rdi, [rsi+48]
	    mov     rcx, rsi
	    call    rdi
	    mov     rdi, [rsi+8]
	    mov     rcx, rsi
	    mov     rdx, message
	    call    rdi
	.halt:
	    hlt
	    jmp     .halt

	section .rdata
	message:
	    dw      __?utf16?__('Hello, UEFI!'), 0
#>

接下来只需要……

#<
	nasm -f win64 hello.s -o hello.o
	ld --oformat=pei-x86-64 --subsystem 10 --image-base 0 --entry=entry \
	    hello.o -o hello.efi
#>

我们的 'Hello, UEFI' 程序就完成了。


# 用 QEMU 和 OVMF 模拟

目前为止，我们只得到一个可执行文件，它还不能被 UEFI 固件识别和运行。幸运的是，我们可以利用 QEMU 和 OVMF 模拟程序的运行。将程序放在 esp/EFI/BOOT/BOOTx64.efi，然后执行：

#<
	qemu-system-x86_64 -bios OVMF.fd -drive format=vvfat,file=fat:rw:esp
#>

屏幕的左上角应该出现 "Hello, UEFI!" 字样。这里，我们让 QEMU 将 esp 目录作为磁盘的 FAT 分区挂载到虚拟机。在 x64 下，UEFI 固件默认 /EFI/BOOT/BOOTx64.efi 为引导程序，所以在虚拟机启动时 OVMF 自动运行了它。


# 摆脱汇编器和链接器：PE 格式

刚才的程序工作得很好，但是有一个问题：它是由汇编器和链接器生成的。本节中，我们将只用二进制编辑器重新编写它。下面将简要介绍 PE 可执行文件（executable image）的结构。有兴趣的读者可以可以参考 [5] 了解更详细的信息。

在 PE 可执行文件的开头是 MS-DOS stub，一个合法的 MS-DOS 程序。通常，它只是输出 'This program cannot be run in DOS mode'，然后退出。曾经有些程序通过将 MS-DOS 版作为 MS-DOS stub 实现可执行文件对 MS-DOS 和 Windows 的兼容，不过如今这种做法已经失去了意义。

在 PE 格式中，MS-DOS EXE 文件头由 28 字节扩展到 64 字节，其结构如下：[6] [7]

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  'M'  |  'Z'  | lastpage_size |   page_count  |  reloc_count  |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  header_size  |   min_alloc   |   max_alloc   |    init_ss    |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|    init_sp    |   checksum    |    init_ip    |    init_cs    |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  reloc_table  |    overlay    |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |   oem_ident   |   oem_info    |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |      pe_header_location       |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

其中，"header_size" 的单位为 16 字节，"lastpage_size" 和 "page_count" 共同指定文件的大小，而 "pe_header_location" 指向 PE 文件头。

例如，刚才的 hello.efi 中的 MS-DOS stub 如下：

#<
	0000 |  4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00
	0010 |  B8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00
	0020 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0030 |  00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00
	0040 |  0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68
	0050 |  69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F
	0060 |  74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20
	0070 |  6D 6F 64 65 2E 0D 0D 0A 24 00 00 00 00 00 00 00
#>

因为 "header_size" 为 0x0004，所以程序从 0x40 位置开始。反汇编得到：[8]

#<
	0E          push    cs
	1F          pop     ds
	BA 0E 00    mov     dx, 0x000E  ; ds:dx = .message
	B4 09       mov     ah, 0x09
	CD 21       int     0x21        ; output '$'-terminated string
	B8 01 4C    mov     ax, 0x4C01
	CD 21       int     0x21        ; exit with code al (= 1)
	        .message:
	......      db      'This program cannot be run in DOS mode.\r\r\n$'
	......      resb    7
#>

接下来是 PE 文件头。可执行文件的文件头由两部分组成：前一部分长 24 字节，是对象文件和可执行文件共有的，而后一部分是可执行文件独有的，它的长度由前一部分指定。前一部分的结构如下：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  'P'  |  'E'  |   0   |   0   |    machine    | section_count |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|           timestamp           |         symbol_table          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|         symbol_count          |  opthdr_size  |     chars     |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

其中，"machine" 指定目标平台，对于 x64 而言为 0x8664；"section_count" 指定节的
数量；"opthdr_size" 指定后一部分文件头的长度；"chars" 位域指定程序的特征，这里
应取 0x0222。余下的 "timestamp"、"symbol_table" 和 "symbol_count" 都可填零。

文件头的第二部分长 "opthdr_size"（取值应该在 112 和 240 之间）字节，结构为：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|     magic     | lvmaj | lvmin |           code_size           |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|           data_size           |           bss_size            |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|             entry             |           code_base           |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                          image_base                           |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|         section_align         |          file_align           |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  os_ver_maj   |  os_ver_min   |  img_ver_maj  |  img_ver_min  |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  ss_ver_maj   |  ss_ver_min   |         win32_version         |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|          image_size           |          header_size          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|           checksum            |   subsystem   |   dll_chars   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                         stack_reserve                         |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                         stack_commit                          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                         heap_reserve                          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                          heap_commit                          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |     data_directory_count      |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                                                               |
	|                      (data directories)                       |
	|                                                               |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

这里的内容有些多。首先，"magic" 标识可执行文件的类型，对于 PE32+ 应为 0x020B。"section_align" 和 "file_align" 分别指定程序在内存中和文件中的对齐要求，这里按最低要求分别取 0x1000 和 0x200。"image_size" 指定加载程序所需内存的大小，必须是 "section_align" 的倍数；"header_size" 指定 MS-DOS stub、文件头和 section table 的总大小，必须是 "file_align" 的倍数。"subsystem" 和 "dll_chars" 有些复杂，这里只需要分别填 10 和 0x0160 即可。（或许应该设置 "dll_chars" 位域的 0x0400 位？我不太确定。）"stack_reserve"、"stack_commit"、"heap_reserve"、"heap_commit" 似乎对 UEFI 应用程序没有意义，可以填零。"code_size"、"data_size"、"bss_size" 只需如实填写，因为我们的程序很简单，"bss_size" 应该为零。最后，"lvmaj"、"lvmin" 以及 "file_align" 和 "image_size" 之间的七项，一共九项，都可以填零。

比较特殊的是 "checksum"，它可能不被校验，因此我姑且也填零。

在文件头的最后是 "data_directory_count" 个 data directory。微软定义了其中前 16 个，比较重要的有 import table、exception table 和 base relocation table 三个。为了简单起见，这里不对它们进行进一步说明，只需要知道 data directory 由 32 位的指针和 32 位的大小构成即可。

在文件头之后是由 "section_count" 个 section header 组成的 section table。

以下是 section header 的结构：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                             name                              |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|         virtual_size          |         virtual_addr          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|         physical_size         |         physical_addr         |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|          relocations          |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  reloc_count  |   0   |   0   |             chars             |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

对于可执行文件，"relocations" 和 "reloc_count" 都填零。从 "physical_addr" 开始的 "physical_size" 字节将被复制到 "virtual_addr" 处开始的 "virtual_size" 字节，不足部分用零填充。为了满足对齐要求，"virtual_addr" 必须是 "section_align" 的倍数，而 "physical_size" 和 "physical_addr" 必须都是 "file_align" 的倍数。

至于 "chars" 位域，指定段的特征。重要的位有：

	0x00000020  代码
	0x00000040  已初始化数据
	0x00000080  未初始化数据
	0x20000000  可执行
	0x40000000  可读
	0x80000000  可写

到此为止，对 PE 格式的介绍就结束了。在继续之前，先看看刚才程序的反汇编：

#<
	48 4B 72 40     mov     rsi, [rdx+64]
	48 8B 7E 30     mov     rdi, [rsi+48]
	48 89 F1        mov     rcx, rsi
	FF D7           call    rdi
	48 8B 7E 08     mov     rdi, [rsi+8]
	48 89 F1        mov     rcx, rsi
	48 BA 00 20 00 00 00 00 00 00
	                mov     rdx, 0x2000
	FF D7           call    rdi
	F4              hlt
	EB FD           jmp     -1
#>

显然，"mov rdx, 0x2000" 需要 base relocation 才能正常工作。

但是我刚才略过了 data directory 相关的内容……所以我们需要绕开它。

因为我们知道 ".rdata" 段在 ".text" 段偏移 0x1000 处，只需将这一条指令换成……

#<
	48 8D 15 E5 0F 00 00
	                lea     rdx, [rel $+ 0xFEC]     ; rip-relative
#>

即可。这里 0xFEC 是这条指令（在 ".text" 段的第 20 字节处）到 ".rdata" 的偏移。

当然，另一种解决方法是将 ".rdata" 合并到 ".text" 中，不过……我不喜欢 :P

现在，我们已经具备徒手创建 'Hello, UEFI' 程序所需的所有知识了。让我们开始吧。

首先是 MS-DOS stub，因为和上面所展示的一样，这里就不再重复了。接下来是文件头的第一部分：

#<
	0080 |  50 45 00 00 64 86 02 00 00 00 00 00 00 00 00 00
	0090 |  00 00 00 00 F0 00 22 02
#>

然后是文件头的第二部分：

#<
	0090 |                          0B 02 00 00 00 02 00 00
	00A0 |  00 02 00 00 00 00 00 00 00 10 00 00 00 10 00 00
	00B0 |  00 00 00 00 00 00 00 00 00 10 00 00 00 02 00 00
	00C0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	00D0 |  00 30 00 00 00 02 00 00 00 00 00 00 0A 00 60 01
	00E0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	00F0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0100 |  00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00
	0110 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0120 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0130 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0140 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0150 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0160 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0170 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0180 |  00 00 00 00 00 00 00 00
#>

然后是节表，我们只需要 ".text" 和 ".rdata" 两个节：

#<
	0180 |                          2E 74 65 78 74 00 00 00
	0190 |  20 00 00 00 00 10 00 00 00 02 00 00 00 02 00 00
	01A0 |  00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 20
	01B0 |  2E 72 64 61 74 61 00 00 1A 00 00 00 00 20 00 00
	01C0 |  00 02 00 00 00 04 00 00 00 00 00 00 00 00 00 00
	01D0 |  00 00 00 00 40 00 00 40
#>

然后是 ".text" 的内容，从 0x0200 开始，直到 0x03FF 结束，不足部分填零：

#<
	0200 |  48 8B 72 40 48 8B 7E 30 48 89 F1 FF D7 48 8B 7E
	0210 |  08 48 89 F1 48 8D 15 E5 0F 00 00 FF D7 F4 EB FD
#>

同样地，".rdata" 的内容从 0x0400 开始，直到 0x5FF 结束，不足部分填零：

#<
	0400 |  48 00 65 00 6C 00 6C 00 6F 00 2C 00 20 00 55 00
	0410 |  45 00 46 00 49 00 21 00 00 00
#>

现在，用得到的可执行文件替换刚才的 hello.efi，再次进行模拟。如果一切顺利，熟悉的 "Hello, UEFI!" 会再次出现在左上角。


# 虽然 vvfat 很好，但是……

接下来，我将介绍 FAT 文件系统。同样地，这只是简要的介绍；读者可以参考 [9] 了解详细的规范，与 vvfat 源码 [10] 配合食用更佳。本节中会涉及不少 magic number，我不打算解释，有兴趣的读者请自行查阅规范。

简单地说，FAT 文件系统由 BPB（BIOS Parameter Block）、FAT 和数据区三部分组成；对于 FAT12 和 FAT16，还有一个 Root Directory Region。

在 FAT 文件系统中，每个文件和目录的数据保存在若干个簇中，它们的位置在 FAT 中以单链表的形式记录。未使用的簇和文件结尾分别由 0 和 -1 标记，注意 FAT32 中簇号仅有 28 位。FAT12 和 FAT16 中，根目录数据保存在固定大小的 Root Directory Region（至少两个扇区）中，而 FAT32 将其视作普通目录保存在簇 "root_cluster" 中。

麻烦的是，FAT12 必须有 1~4084 个簇，FAT16 必须有 4085~65524 个簇，FAT32 必须有至少 65525 个簇。我怎么也想不明白为什么设计者不把版本保存在 BPB 中。

文件系统的信息保存在 BPB 中。在 FAT12 和 FAT16 中，其结构如下：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|      jmp_to_boot      |               oem_ident               |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|       oem_ident       |  sector_size  |  spc  | rsvd_sect_cnt |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|fat_cnt|rtdir_entry_cnt|sector_count_16| media |   fat_size    |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|sect_per_track |  head_count   |      hidden_sector_count      |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|        sector_count_32        |drv_num|   0   |bootsig|  ... >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<    volume_serial     |             volume_label             >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<                volume_label                  |    fs_type   >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<                   fs_type                    |
	+-------+-------+-------+-------+-------+-------+
#>

其中，"spc" 即 sectors per cluster，是因为写不下所以缩写的。神奇的是，也许是为了兼容性，FAT 要求 "fat_size_16" 和 "fat_size_32" 中恰有一个非零。

上面介绍的是 FAT12 和 FAT16 的 BPB 格式。FAT32 的 BPB 结构如下：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|      jmp_to_boot      |               oem_ident               |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|       oem_ident       |  sector_size  |  spc  | rsvd_sect_cnt |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|fat_cnt|   0   |   0   |   0   |   0   | media |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|sect_per_track |  head_count   |      hidden_sector_count      |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|        sector_count_32        |           fat_size            |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   ext_flags   |   0   |   0   |         root_cluster          |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|  fs_info_pos  |  backup_pos   |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|drv_num|   0   |bootsig|         volume_serial         |  ... >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<                        volume_label                         >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<     ...      |                    fs_type                   >|
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|<   fs_type    |
	+-------+-------+
#>

另外，第 510 和 511 字节必须分别为 0x55 和 0xAA，且自第 512 字节起必须全填零。不得不说，FAT 确实是古老的文件系统，乱七八糟的布局与前文介绍的 PE 形成了鲜明的对比，尤其是不对齐的几项令我相当难受 :P

对于 FAT32，6 号扇区作为 0 号扇区的备份，在存储介质损坏时作恢复用。第 1 号扇区的第 0~3、484~487 和 508~511 字节分别固定为 52 52 61 41、72 72 41 61 和 00 00 55 AA；第 488~491 和 492~495 字节分别是剩余簇数和下一个未使用的簇，若不可用则填 FF。其余部分必须填零。

接下来是 FAT 本身。FAT12、FAT16 和 FAT32 中的 FAT 条目分别占 12、16 和 32 位。当然，12 位的条目可能横跨两个扇区……不过这是软件的事。第零个 FAT 条目记录 BPB 中的 "media" 值，其余位填一；第一个 FAT 条目记录文件系统状态，这里可以填一。其余各条目记录上面提到的单链表。

在 FAT 文件系统中，目录由大小固定为 32 字节的目录项构成：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|                             name                              |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|       extension       | attrs |   0   |         ctime         |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|     cdate     |     adate     |  position_hi  |     mtime     |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|     mdate     |  position_lo  |             size              |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

其中，"name" 与 "extension" 共同构成文件名，不足部分用空格（0x20）填充。文件名中不能出现小写字母和某些符号，FAT 因此不区分大小写。"attrs" 是文件属性，对普通文件取 0x00，对普通目录取 0x10。"position_lo"、"position_hi" 和 "size" 共同指定数据所在的簇号和大小。对于 "size" 为零的文件，"position" 也应填零。

除根目录外，每个目录的前两个条目必须是 "." 和 ".."，分别指向自身和父目录。如果当前目录的父目录是根目录，那么 "position" 填零。

至于将前一节得到的可执行文件放进 FAT 文件系统的工作，留到下一节再进行。


# 最后一步：GPT 分区表

与前面几节的内容相比，GPT 是最简单的。它也由 UEFI 规范定义，可以参考 [11]。

为了与只支持 MBR 的系统兼容，GPT 定义第零扇区为 Protective MBR，将整个磁盘作为一个分区，防止数据被破坏。第零扇区的前 440 字节是任意的，第 446~461 字节指定上述分区，第 510 和 511 字节分别为 0x55 和 0xAA，其余部分填零。

具体地，第 446~461 字节的结构如下：

#<
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|   0   |       0x000200        | 0xEE  |        end_chs        |
	+-------+-------+-------+-------+-------+-------+-------+-------+
	|          0x00000001           |        partition_size         |
	+-------+-------+-------+-------+-------+-------+-------+-------+
#>

其中 "end_chs" 和 "partition_size" 由磁盘大小决定，若超出表示范围则填一。

第一扇区为 GPT 头，保存 GPT 的信息，其格式为：

#<
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|          "EFI PART"           |  0x00010000   |  header_size  |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	| header_crc32  | 0 | 0 | 0 | 0 |            my_lba             |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|         alternate_lba         |       first_usable_lba        |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|        last_usable_lba        |           disk_guid          >|
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|<          disk_guid           |     partition_entry_array     |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|     partition_entry_count     |     partition_entry_size      |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|  partition_entry_array_crc32  |
	+---+---+---+---+---+---+---+---+
#>

第一扇区的剩余部分必须填零。Partition Entry Array 至少需要至少 16KiB 的空间。

接下来是 Partition Entry 的结构：

#<
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|                           type_guid                           |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|                             guid                              |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|           start_lba           |            end_lba            |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|             attrs             |             name             >|
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|<                            name                             >|
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|<                            name                             >|
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|<                            name                             >|
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	|<                            name                              |
	+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
#>

其中 "name" 是 UCS-2 编码的字符串，"type_guid" 由厂商定义，填零表示条目未使用，而 EFI System Partition 为 C12A7328-F81F-11D2-BA4B-00A0C93EC93B。注意，GUID 的表示中前三段为小端序，后两段为大端序（至于为什么，可以参考 [12]）。

GPT 要求在磁盘末尾保存 GPT Header 和 Partition Entry Array 的备份，以 "my_lba" 和 "alternate_lba" 相互关联。

终于要结束了……假设 512 字节的扇区大小，我们先看看需要多少扇区：

	00      GPT Protective MBR
	01      GPT Header
	02~33   GPT Partition Entry Array
	34      FAT BIOS Parameter Block
	35      FAT File Allocation Table
	36~37   FAT Root Directory Region
	38      FAT Directory 'EFI'
	39      FAT Directory 'BOOT'
	40~42   Our executable
	43~74   GPT Partition Entry Array (Backup)
	75      GPT Header (Backup)

确实有些多……GPT 分区表占据了绝大部分的空间。

GPT Protective MBR 从 0x01B8 开始的部分：

#<
	01B0 |                          00 00 00 00 00 00 00 00
	01C0 |  02 00 EE 00 00 00 01 00 00 00 4B 00 00 00 00 00
	01D0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	01E0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	01F0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 AA
#>

GPT Header 从 0x200 开始（其中 22 38 62 41 和 A8 E3 C6 A4 是 CRC32 值）：

#<
	0200 |  45 46 49 20 50 41 52 54 00 00 01 00 5C 00 00 00
	0210 |  22 38 62 41 00 00 00 00 01 00 00 00 00 00 00 00
	0220 |  4B 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00
	0230 |  2A 00 00 00 00 00 00 00 D7 53 B1 F2 0C 74 78 49
	0240 |  9C EF C6 EB 70 A0 32 E7 02 00 00 00 00 00 00 00
	0250 |  80 00 00 00 80 00 00 00 A8 E3 C6 A4
#>

GPT Partition Entry Array 从 0x400 开始，它的备份从 0x5600 开始：

#<
	0400 |  28 73 2A C1 1F F8 D2 11 BA 4B 00 A0 C9 3E C9 3B
	0410 |  76 62 AD 5D 50 EF B8 4B B7 91 11 90 5C 16 6B 4C
	0420 |  22 00 00 00 00 00 00 00 2A 00 00 00 00 00 00 00
	0430 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0440 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0450 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0460 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	0470 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#>

大量填零之后，来到位于 0x4400 的 FAT BIOS Parameter Block：

#<
	4400 |  F4 EB FD 00 00 00 00 00 00 00 00 00 02 01 01 00
	4410 |  01 20 00 09 00 F0 01 00 00 00 00 00 00 00 00 00
	4420 |  00 00 00 00 00 00 29 00 00 00 00 4E 4F 20 4E 41
	4430 |  4D 45 20 20 20 20 46 41 54 31 32 20 20 20
#>

……以及……

#<
	45F0 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 AA
#>

接下来是占据整整一个扇区的 FAT File Allocation Table，其实只用了不到 11 字节：

#<
	4600 |  F0 FF FF FF FF FF 05 60 00 FF 0F
#>

然后是 FAT 的 Root Directory Region 和两个目录结构（分别对应 EFI 和 BOOT）：

#<
	4800 |  45 46 49 20 20 20 20 20 20 20 20 10 00 00 00 00
	4810 |  00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00
#>

#<
	4C00 |  2E 20 20 20 20 20 20 20 20 20 20 10 00 00 00 00
	4C10 |  00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
	4C20 |  2E 2E 20 20 20 20 20 20 20 20 20 10 00 00 00 00
	4C30 |  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	4C40 |  42 4F 4F 54 20 20 20 20 20 20 20 10 00 00 00 00
	4C50 |  00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00
#>

#<
	4E00 |  2E 20 20 20 20 20 20 20 20 20 20 10 00 00 00 00
	4E10 |  00 00 00 00 00 00 00 00 00 00 03 00 60 00 00 00
	4E20 |  2E 2E 20 20 20 20 20 20 20 20 20 10 00 00 00 00
	4E30 |  00 00 00 00 00 00 00 00 00 00 02 00 60 00 00 00
	4E40 |  42 4F 4F 54 58 36 34 20 45 46 49 00 00 00 00 00
	4E50 |  00 00 00 00 00 00 00 00 00 00 04 00 00 06 00 00
#>

在 0x5000~0x55FF 是前面的可执行文件，这里不再重复。

在 0x5600~0x95FF 是 GPT Partition Entry Array 的备份，也不再重复。

最后是 GPT Header 的备份，位于 0x9600。因为 "my_lba" 与 "alternative_lba" 调换了位置，它的 "crc32" 与 GPT Header 本身的不同。

#<
	9600 |  45 46 49 20 50 41 52 54 00 00 01 00 5C 00 00 00
	9610 |  93 31 77 17 00 00 00 00 4B 00 00 00 00 00 00 00
	9620 |  01 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00
	9630 |  2A 00 00 00 00 00 00 00 D7 53 B1 F2 0C 74 78 49
	9640 |  9C EF C6 EB 70 A0 32 E7 2B 00 00 00 00 00 00 00
	9650 |  80 00 00 00 80 00 00 00 A8 E3 C6 A4
#>

将文件其余部分填零，然后保存为 hello.bin，然后

#<
	qemu-system-x86-64 -bios OVMF.fd -drive format=raw,file=hello.bin
#>

这样就得到了一个纯手工制作的 'Hello, UEFI' 镜像。


# 结语及其它

不得不说，写这么一篇博文还真是累啊……以后再也不这样做了……

写完之后我才发现，我写的东西对操作系统开发似乎毫无帮助。（挠头。）

虽然我当下的主业是数学，我果然还是一如既往地不务正业啊。我有时担心自己的学习，但是……似乎并不能改变这样的现状。我……也许只是个笨蛋罢了。


# 参考资料

[1] HxD - Freeware Hex Editor and Disk Editor https://mh-nexus.de/en/hxd/

[2] https://uefi.org/specs/UEFI/2.10/04_EFI_System_Table.html

[3] https://uefi.org/specs/UEFI/2.10/02_Overview.html#x64-platforms

[4] https://uefi.org/specs/UEFI/2.10/12_Protocols_Console_Support.html#efi-simple-text-output-protocol

[5] PE Format https://learn.microsoft.com/en-us/windows/win32/debug/pe-format

[6] MZ https://wiki.osdev.org/MZ

[7] MS-DOS EXE http://fileformats.archiveteam.org/wiki/MS-DOS_EXE

[8] Ralf Brown's Interrupt List - HTML Version https://www.ctyme.com/rbrown.htm

[9] Microsoft FAT Specification

[10] https://github.com/qemu/qemu/blob/master/block/vvfat.c

[11] https://uefi.org/specs/UEFI/2.10/05_GUID_Partition_Table_Format.html

[12] https://devblogs.microsoft.com/oldnewthing/20220928-00/?p=107221
